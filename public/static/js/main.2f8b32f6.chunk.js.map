{"version":3,"sources":["components/LaunchItem.jsx","components/Launches.jsx","components/Launch.jsx","App.js","serviceWorker.js","index.js"],"names":["LaunchItem","launch","flight_number","mission_name","launch_date_local","launch_success","className","classNames","format","to","LAUNCHES_QUERY","gql","Launches","Fragment","query","loading","error","data","console","log","launches","map","key","Component","LAUNCH_QUERY","Launch","this","props","match","params","parseInt","variables","launch_year","rocket","rocket_id","rocket_name","rocket_type","client","ApolloClient","uri","App","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uXAuBeA,EAlBI,SAAC,GAEb,IAAD,IADJC,OAASC,EACL,EADKA,cAAeC,EACpB,EADoBA,aAAcC,EAClC,EADkCA,kBAAmBC,EACrD,EADqDA,eAEzD,OACE,yBAAKC,UAAU,uBACb,yBAAKA,UAAU,OACb,wCAAa,0BAAMA,UAAWC,IAAW,CACvC,eAAgBF,EAChB,eAAgBA,MAFlB,IAE6CF,GAC7C,oCAAS,kBAAC,IAAD,CAAQK,OAAO,oBAAoBJ,KAE9C,yBAAKE,UAAU,YACb,kBAAC,IAAD,CAAMG,GAAE,kBAAaP,GAAiBI,UAAU,mBAAhD,c,iNCZR,IAAMI,EAAiBC,IAAH,KAoCLC,EAzBf,iLAEI,OACE,kBAAC,IAAMC,SAAP,KACE,wBAAIP,UAAU,kBAAd,YACA,kBAAC,IAAD,CAAOQ,MAAOJ,IACX,YAA6B,IAA3BK,EAA0B,EAA1BA,QAASC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,KACjB,OAAGF,EAAgB,2CAChBC,GAAOE,QAAQC,IAAIH,GACtBE,QAAQC,IAAIF,GAEL,kBAAC,IAAMJ,SAAP,KAEHI,EAAKG,SAASC,KAAI,SAAApB,GAAM,OACtB,kBAAC,EAAD,CAAYqB,IAAKrB,EAAOC,cAAeD,OAAQA,iBAdjE,GAA8BsB,a,+WCX9B,IAAMC,EAAeb,IAAH,KA4DHc,EA3Cf,iLACY,IACHvB,EAAiBwB,KAAKC,MAAMC,MAAMC,OAAlC3B,cAEL,OADAA,EAAgB4B,SAAS5B,GAEvB,kBAAC,WAAD,KACE,kBAAC,IAAD,CAAOY,MAAOU,EAAcO,UAAW,CAAC7B,mBACrC,YAA6B,IAA3Ba,EAA0B,EAA1BA,QAASC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,KACjB,GAAGF,EAAS,OAAO,0CAChBC,GAAOE,QAAQC,IAAIH,GAFK,MASvBC,EAAKhB,OALPE,EAJyB,EAIzBA,aACAD,EALyB,EAKzBA,cACA8B,EANyB,EAMzBA,YACA3B,EAPyB,EAOzBA,eAPyB,IAQzB4B,OAASC,EARgB,EAQhBA,UAAWC,EARK,EAQLA,YAAaC,EARR,EAQQA,YAGnC,OACE,yBAAK9B,UAAU,kBACb,4BAAI,0BAAMA,UAAU,aAAhB,aAA6CH,GACjD,4CAAkBD,GAClB,yCAAe8B,GACf,8CAAmB,0BAAM1B,UAAWC,IAAW,CAC7C,eAAgBF,EAChB,eAAgBA,KACbA,EAAiB,MAAQ,OAE9B,wBAAIC,UAAU,QAAd,kBACA,wBAAIA,UAAU,cACZ,wBAAIA,UAAU,mBAAkB,0CAAgB4B,GAAhD,KACA,wBAAI5B,UAAU,mBAAkB,0CAAgB6B,GAAhD,KACA,wBAAI7B,UAAU,mBAAkB,0CAAgB8B,GAAhD,eAhClB,GAA4Bb,a,QCbtBc,G,MAAS,IAAIC,IAAa,CAC9BC,IAAK,cAiBQC,EAdH,WACV,OACE,kBAAC,IAAD,CAAgBH,OAAQA,GACtB,kBAAC,IAAD,KACE,yBAAK/B,UAAU,OACb,sCACA,kBAAC,IAAD,CAAOmC,OAAK,EAACC,KAAK,IAAIC,UAAW/B,IACjC,kBAAC,IAAD,CAAO6B,OAAK,EAACC,KAAK,yBAAyBC,UAAWlB,QCR5CmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASnB,MACvB,2DCZNoB,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.2f8b32f6.chunk.js","sourcesContent":["import React from 'react';\r\nimport classNames from 'classnames';\r\nimport Moment from 'react-moment';\r\nimport {Link} from 'react-router-dom';\r\n\r\nconst LaunchItem = ({\r\n  launch: {flight_number, mission_name, launch_date_local, launch_success}\r\n}) => {\r\n  return (\r\n    <div className=\"card card-body mb-3\">\r\n      <div className=\"row\">\r\n        <h4>mission: <span className={classNames({\r\n          'text-success': launch_success,\r\n          'text-danger': !launch_success})}></span> {mission_name}</h4>\r\n        <p>date: <Moment format='YYYY-MM-DD HH:mm'>{launch_date_local}</Moment></p>\r\n      </div>\r\n      <div className=\"col-md-3\">\r\n        <Link to={`/launch/${flight_number}`} className='btn btn-success'>details</Link>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default LaunchItem\r\n","import React, { Component } from 'react'\r\nimport gql from 'graphql-tag'\r\nimport {Query} from 'react-apollo'\r\nimport LaunchItem from './LaunchItem'\r\n\r\nconst LAUNCHES_QUERY = gql`\r\n  query LaunchsQuery{\r\n    launches{\r\n      flight_number\r\n      mission_name\r\n      launch_date_local\r\n      launch_success\r\n    }\r\n  }\r\n`\r\n\r\nexport class Launches extends Component {\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <h1 className=\"display-4 my-3\">Launches</h1>\r\n        <Query query={LAUNCHES_QUERY}>\r\n          {({loading, error, data}) => {\r\n            if(loading) return <h4>loading...</h4>\r\n            if(error) console.log(error)\r\n            console.log(data)\r\n\r\n            return <React.Fragment>\r\n              {\r\n                data.launches.map(launch => (\r\n                  <LaunchItem key={launch.flight_number} launch={launch} />\r\n                ))\r\n              }\r\n            </React.Fragment>\r\n          }}\r\n        </Query>\r\n      </React.Fragment>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Launches\r\n","import React, { Component, Fragment } from 'react'\r\nimport gql from 'graphql-tag'\r\nimport {Query} from 'react-apollo'\r\nimport classNames from 'classnames'\r\n\r\nconst LAUNCH_QUERY = gql`\r\n  query LaunchQuery($flight_number: Int!) {\r\n    launch(flight_number: $flight_number) {\r\n      flight_number\r\n      mission_name\r\n      launch_year\r\n      launch_success\r\n      launch_date_local,\r\n      rocket {\r\n        rocket_id\r\n        rocket_name\r\n        rocket_type\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nexport class Launch extends Component {\r\n  render() {\r\n    let {flight_number} = this.props.match.params\r\n    flight_number = parseInt(flight_number)\r\n    return (\r\n      <Fragment>\r\n        <Query query={LAUNCH_QUERY} variables={{flight_number}}>\r\n          {({loading, error, data}) => {\r\n            if(loading) return <h4>loading...</h4>\r\n            if(error) console.log(error);\r\n            const {\r\n              mission_name,\r\n              flight_number,\r\n              launch_year,\r\n              launch_success,\r\n              rocket: {rocket_id, rocket_name, rocket_type}\r\n            } = data.launch;\r\n\r\n            return (\r\n              <div className=\"display-4 my-3\">\r\n                <h2><span className=\"text-dark\">Mission: </span>{mission_name}</h2>\r\n                <p>flight number:{flight_number}</p>\r\n                <p>launch year{launch_year}</p>\r\n                <p> launch success <span className={classNames({\r\n                  'text-success': launch_success,\r\n                  'text-danger': !launch_success\r\n                })}>{launch_success ? 'yes' : 'no'}</span></p>\r\n\r\n                <h4 className=\"my-3\">Rocket Details</h4>\r\n                <ul className=\"list-group\">\r\n                  <li className=\"list-group-item\"><h6>Rocket ID: {rocket_id}</h6> </li>\r\n                  <li className=\"list-group-item\"><h6>Rocket ID: {rocket_name}</h6> </li>\r\n                  <li className=\"list-group-item\"><h6>Rocket ID: {rocket_type}</h6> </li>\r\n                </ul>\r\n              </div>\r\n            )\r\n          }}\r\n        </Query>\r\n      </Fragment>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Launch","import React from 'react';\nimport ApolloClient from 'apollo-boost'\nimport {ApolloProvider} from 'react-apollo'\nimport Launches from './components/Launches.jsx'\nimport Launch from './components/Launch'\nimport {BrowserRouter as Router, Route} from 'react-router-dom'\n\nimport './App.css';\n\nconst client = new ApolloClient({\n  uri: '/graphql'\n})\n\nconst App = () => {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <div className=\"App\">\n          <h1>spaceX</h1>\n          <Route exact path=\"/\" component={Launches} />\n          <Route exact path=\"/launch/:flight_number\" component={Launch} />\n        </div>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}